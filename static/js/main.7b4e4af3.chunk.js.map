{"version":3,"sources":["../../src/dateValidation.ts","../../src/dateMap.tsx","../../src/styles.ts","../../src/index.tsx","../../src/helpers.ts","common/select-datepicker.tsx","common/elements.tsx","App.tsx","index.tsx"],"names":["buildDateFromInput","day","Date","Number","isValidDate","userDate","month","isDate","Object","dayMatch","date","monthMatch","yearMatch","isValidDateObject","props","maxDate","maxDatePlusOne","minDate","minDateMinusOne","MONTHMAP","1","2","3","4","5","6","7","8","9","10","11","12","getDays","showPlaceholder","days","value","disabled","dayLabel","i","getMonths","months","monthLabel","monthNames","getYears","years","maxYear","max","minYear","min","yearLabel","flexRow","display","flexDirection","flexColumn","SelectDatepicker","dateValue","useState","hasError","setHasError","error","setError","year","setDate","orderArray","useMemo","onDateChange","useCallback","validDateChange","newDate","renderError","validate","errorString","onInputChange","e","inputField","className","style","htmlFor","id","name","onChange","options","React","key","option","dateField","showPlaceholders","labels","useEffect","showLabels","showErrors","format","StyledSelectDatepicker","styled","DateContainer","div","label","H3","h3","Header","header","App","setValue","maxValue","setMaxValue","minValue","setMinValue","onMaxDateChange","onMinDateChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7b4e4af3.chunk.js","sourcesContent":["/**\n * Build a date from input\n * @param {string} day\n * @param {string} month\n * @param {string} year\n */\nconst buildDateFromInput = (day: string, month: string, year: string) => {\n  const date = new Date(Number(year), Number(month) - 1, Number(day));\n  return date;\n};\n\n/**\n * Check if the date value is a valid Date object and that it matches the values it was created from\n * @param date Date\n * @param day string\n * @param month string\n * @param year string\n */\nconst isValidDateObject = (\n  date: Date,\n  day: string,\n  month: string,\n  year: string,\n) => {\n  const isDate = Object.prototype.toString.call(date) === '[object Date]';\n  const dayMatch = date.getDate() === Number(day);\n  const monthMatch = date.getMonth() === Number(month) - 1;\n  const yearMatch = date.getFullYear() === Number(year);\n\n  return isDate && dayMatch && monthMatch && yearMatch;\n};\n\n/**\n * Determine if provided date is a valid date and falls between date range\n * @param {string} day\n * @param {string} month\n * @param {string} year\n * @param {object} props\n */\nconst isValidDate = (day: string, month: string, year: string, props: any) => {\n  const userDate = buildDateFromInput(day, month, year);\n\n  // Must be a valid date\n  if (!isValidDateObject(userDate, day, month, year)) {\n    return props.invalidMessage || 'Not a valid date';\n  }\n\n  // Must be same or before max date\n  if (props.maxDate) {\n    const { maxDate } = props;\n    if (userDate > maxDate) {\n      const maxDatePlusOne = new Date(maxDate);\n      maxDatePlusOne.setDate(maxDatePlusOne.getDate() + 1);\n\n      return (\n        props.maxDateMessage ||\n        `Date must be less than ${maxDatePlusOne.toDateString().substring(3)}`\n      );\n    }\n  }\n\n  // Must be same or after min date\n  if (props.minDate) {\n    const { minDate } = props;\n    if (userDate < minDate) {\n      const minDateMinusOne = new Date(minDate);\n      minDateMinusOne.setDate(minDateMinusOne.getDate() - 1);\n\n      return (\n        props.minDateMessage ||\n        `Date must be greater than ${minDateMinusOne\n          .toDateString()\n          .substring(3)}`\n      );\n    }\n  }\n\n  return '';\n};\n\nexport { isValidDate, buildDateFromInput };\n","import React from 'react';\n\nconst MONTHMAP = {\n  1: 'January',\n  2: 'February',\n  3: 'March',\n  4: 'April',\n  5: 'May',\n  6: 'June',\n  7: 'July',\n  8: 'August',\n  9: 'September',\n  10: 'October',\n  11: 'November',\n  12: 'December',\n};\n\nconst getDays = (showPlaceholder: boolean, dayLabel: string) => {\n  const days = [];\n\n  days.push(\n    <option value=\"\" disabled>\n      {showPlaceholder ? dayLabel || 'Day' : ''}\n    </option>,\n  );\n\n  for (let i = 1; i <= 31; i += 1) {\n    days.push(<option value={`${i}`}>{i}</option>);\n  }\n\n  return days;\n};\n\nconst getMonths = (\n  showPlaceholder: boolean,\n  monthLabel: string,\n  monthNames: Array<string> | undefined,\n) => {\n  const months = [];\n\n  months.push(\n    <option value=\"\" disabled>\n      {showPlaceholder ? monthLabel || 'Month' : ''}\n    </option>,\n  );\n\n  for (let i = 1; i <= 12; i += 1) {\n    months.push(\n      <option value={`${i}`}>\n        {monthNames ? monthNames[i - 1] : MONTHMAP[i]}\n      </option>,\n    );\n  }\n\n  return months;\n};\n\nconst getYears = (\n  max: Date | undefined,\n  min: Date | undefined,\n  showPlaceholder: boolean,\n  value: string,\n  yearLabel: string,\n) => {\n  const years = [];\n  let maxYear;\n  let minYear;\n\n  if (max !== undefined) {\n    maxYear = max.getFullYear();\n  } else {\n    maxYear = new Date().getFullYear();\n  }\n\n  if (min !== undefined) {\n    minYear = min.getFullYear();\n  } else {\n    minYear = 1900;\n  }\n\n  if (value) {\n    if (Number(value) > maxYear) {\n      maxYear = Number(value);\n    }\n\n    if (Number(value) < minYear) {\n      minYear = Number(value);\n    }\n  }\n\n  years.push(\n    <option value=\"\" disabled>\n      {showPlaceholder ? yearLabel || 'Year' : ''}\n    </option>,\n  );\n\n  for (let i = maxYear; i >= minYear; i -= 1) {\n    years.push(<option value={`${i}`}>{i}</option>);\n  }\n\n  return years;\n};\n\nexport { getDays, getMonths, getYears };\n","export const flexRow: React.CSSProperties = {\n  display: 'flex',\n  flexDirection: 'row',\n};\n\nexport const flexColumn: React.CSSProperties = {\n  display: 'flex',\n  flexDirection: 'column',\n};\n","/* eslint-disable react/no-array-index-key */\nimport React, {\n  useState,\n  useCallback,\n  ChangeEvent,\n  useMemo,\n  useEffect,\n} from 'react';\nimport { isValidDate, buildDateFromInput } from './dateValidation';\nimport { getDays, getMonths, getYears } from './dateMap';\nimport { IDate, ISelectDatePicker } from './interfaces';\nimport { spreadDateToObject } from './helpers';\nimport { flexRow, flexColumn } from './styles';\n\nconst SelectDatepicker: React.FC<ISelectDatePicker> = (props) => {\n  const [hasError, setHasError] = useState<boolean>(false);\n  const [error, setError] = useState<string>();\n  const [date, setDate] = useState<IDate>(spreadDateToObject(props.value));\n\n  const orderArray = useMemo(() => props.format!.split('/'), [props.format]);\n\n  /**\n   * Call onDateChange prop with the provided date object\n   */\n  const onDateChange = useCallback(\n    (newDate) => {\n      props.onDateChange(newDate);\n    },\n    [props],\n  );\n\n  /**\n   * Build a Date object and call the onDateChange function\n   */\n  const validDateChange = useCallback(() => {\n    const newDate = buildDateFromInput(date.day, date.month, date.year);\n    onDateChange(newDate);\n  }, [date.day, date.month, date.year, onDateChange]);\n\n  /**\n   * Sets the error state and calls the onDateChange function with a null value\n   */\n  const renderError = useCallback(\n    (err, hasErr) => {\n      setError(err);\n      setHasError(hasErr);\n      onDateChange(null);\n    },\n    [onDateChange],\n  );\n\n  /**\n   * Validates if a the inputs form a valid date\n   * Returns null if values are not set\n   * Returns null and errors if date is not valid\n   * Returns a valid date object when everything passes\n   */\n  const validate = useCallback(() => {\n    const { day, month, year } = date;\n\n    // Must contain values\n    if (!day || !month || !year) {\n      onDateChange(null);\n      return;\n    }\n\n    // Validate date input\n    const errorString = isValidDate(day, month, year, props);\n    if (errorString !== '') {\n      renderError(errorString, true);\n      return;\n    }\n\n    validDateChange();\n  }, [date, onDateChange, props, renderError, validDateChange]);\n\n  /**\n   * Sets the date state when an input value changes\n   */\n  const onInputChange = useCallback(\n    (e: ChangeEvent<HTMLSelectElement>) => {\n      setDate({ ...date, [e.target.name]: e.target.value });\n    },\n    [date],\n  );\n\n  /**\n   * Create an input field with a form label\n   */\n  const inputField = useCallback(\n    (id, label, value, options) => {\n      const className = `rid_${id}-container`;\n\n      return (\n        <div className={`${className}`} style={flexColumn}>\n          {props.showLabels ? <label htmlFor={id}>{label}</label> : null}\n          <select\n            className={`${hasError ? 'has-error' : ''}`}\n            id={id}\n            name={id}\n            value={value}\n            onChange={onInputChange}>\n            {options.map((option: string, i: number) => {\n              return (\n                <React.Fragment key={`${option}-${i}`}>{option}</React.Fragment>\n              );\n            })}\n          </select>\n        </div>\n      );\n    },\n    [hasError, onInputChange, props.showLabels],\n  );\n\n  /**\n   * Creates an object with all input field elements\n   */\n  const dateField = useMemo(() => {\n    const { showPlaceholders, monthNames, maxDate, minDate, labels } = props;\n\n    const dayLabel = (labels && labels.day) || 'Day';\n    const monthLabel = (labels && labels.month) || 'Month';\n    const yearLabel = (labels && labels.year) || 'Year';\n\n    const fields = {\n      day: inputField(\n        'day',\n        dayLabel,\n        date.day,\n        getDays(showPlaceholders!, dayLabel),\n      ),\n      month: inputField(\n        'month',\n        monthLabel,\n        date.month,\n        getMonths(showPlaceholders!, monthLabel, monthNames),\n      ),\n      year: inputField(\n        'year',\n        yearLabel,\n        date.year,\n        getYears(maxDate, minDate, showPlaceholders!, date.year, yearLabel),\n      ),\n    };\n\n    return fields;\n  }, [date.day, date.month, date.year, inputField, props]);\n\n  /**\n   * When ever the date state changes then clear errors and validate the date\n   */\n  useEffect(() => {\n    setError('');\n    setHasError(false);\n    validate();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [date]);\n\n  return (\n    <div className={`rid ${props.className}`}>\n      <div className=\"rid_date-container\" style={flexRow}>\n        {orderArray.map((key, i) => {\n          return (\n            <React.Fragment key={`${key}-${i}`}>\n              {dateField[key]}\n            </React.Fragment>\n          );\n        })}\n      </div>\n      {props.showErrors && hasError && (\n        <div className=\"error-message\">{error}</div>\n      )}\n    </div>\n  );\n};\n\nexport default SelectDatepicker;\n\nSelectDatepicker.defaultProps = {\n  value: null,\n  showLabels: true,\n  showPlaceholders: true,\n  showErrors: true,\n  format: 'month/day/year',\n  className: '',\n};\n","import { IDate } from './interfaces';\n\n/**\n * Parse date object into day, month, year state\n */\nexport const spreadDateToObject = (dateValue: Date | null): IDate => {\n  return {\n    day: dateValue ? `${dateValue.getDate()}` : '',\n    month: dateValue ? `${dateValue.getMonth() + 1}` : '',\n    year: dateValue ? `${dateValue.getFullYear()}` : '',\n  };\n};\n","import styled from 'styled-components';\nimport SelectDatepicker from 'react-select-datepicker';\n\nconst StyledSelectDatepicker: any = styled(SelectDatepicker)`\n  .rid_date-container {\n    > div {\n      margin-right: 15px;\n\n      &:last-child {\n        margin-right: 0;\n      }\n\n      label {\n        font-size: 0.8rem;\n        margin-bottom: 5px;\n        font-weight: 600;\n      }\n\n      select {\n        color: #444444;\n        font-size: 13px;\n        padding: 11px;\n        border-radius: 3px;\n        border: none;\n        text-align: center;\n        -webkit-appearance: none;\n        -moz-appearance: none;\n        appearance: none;\n\n        &.has-error {\n          border: 2px solid #f97474;\n        }\n      }\n    }\n\n    .rid_day-container select {\n      width: 60px;\n    }\n    .rid_month-container select {\n      width: 90px;\n    }\n    .rid_year-container select {\n      width: 80px;\n    }\n  }\n\n  .error-message {\n    color: #f97474;\n    margin-top: 6px;\n    font-size: 0.9rem;\n  }\n`;\n\nconst DateContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n\n  .rid_date-container {\n    justify-content: center;\n  }\n`;\n\nexport { StyledSelectDatepicker, DateContainer };\n","import styled from 'styled-components';\n\nconst Label = styled.label`\n  font-weight: 600;\n  text-transform: uppercase;\n  margin-bottom: 10px;\n  display: block;\n  font-size: 0.9rem;\n  color: #333333;\n`;\n\nconst H3 = styled.h3`\n  font-weight: 600;\n  font-size: 1.5rem;\n  text-align: center;\n  color: #333;\n  margin-bottom: 1rem;\n  margin-top: 4rem;\n`;\n\nconst Header = styled.header`\n  font-weight: 600;\n  font-size: 2.5rem;\n  text-align: center;\n  color: #333;\n  margin-bottom: 1rem;\n  margin-top: 2rem;\n`;\n\nexport { Label, H3, Header }\n","import React, { useState, useCallback } from 'react';\n\nimport {\n  StyledSelectDatepicker,\n  DateContainer,\n} from './common/select-datepicker';\nimport { H3, Header } from './common/elements';\n\nconst App = () => {\n  const [value, setValue] = useState<Date | null>(null);\n  const [maxValue, setMaxValue] = useState(new Date());\n  const [minValue, setMinValue] = useState(new Date(1956, 0, 1));\n\n  const onDateChange = useCallback((date: any) => {\n    setValue(date);\n  }, []);\n\n  const onMaxDateChange = useCallback((date: any) => {\n    setMaxValue(date);\n  }, []);\n\n  const onMinDateChange = useCallback((date: any) => {\n    setMinValue(date);\n  }, []);\n\n  return (\n    <div>\n      <Header>React Select Datepicker</Header>\n\n      <H3>Standard</H3>\n      <DateContainer>\n        <StyledSelectDatepicker value={value} onDateChange={onDateChange} />\n      </DateContainer>\n\n      <H3>Max Date</H3>\n      <DateContainer>\n        <StyledSelectDatepicker\n          value={maxValue}\n          onDateChange={onMaxDateChange}\n          maxDate={new Date(1999, 11, 31)}\n        />\n      </DateContainer>\n\n      <H3>Min Date</H3>\n      <DateContainer>\n        <StyledSelectDatepicker\n          value={minValue}\n          onDateChange={onMinDateChange}\n          minDate={new Date(2000, 0, 1)}\n        />\n      </DateContainer>\n\n      <H3>Custom Labels</H3>\n      <DateContainer>\n        <StyledSelectDatepicker\n          value={value}\n          labels={{\n            year: 'Año',\n            month: 'Mes',\n            day: 'Día',\n          }}\n          monthNames={[\n            'enero',\n            'febrero',\n            'marzo',\n            'abril',\n            'mayo',\n            'junio',\n            'julio',\n            'agosto',\n            'septiembre',\n            'octubre',\n            'noviembre',\n            'diciembre',\n          ]}\n          onDateChange={onDateChange}\n        />\n      </DateContainer>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}